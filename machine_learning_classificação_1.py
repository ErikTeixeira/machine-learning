# -*- coding: utf-8 -*-
"""machine learning - classificação - 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v1TUTwJJy1QoPDUqmvR_qot5CJOFM2nY
"""

# features  ( 1 - sim, 0 - não)
# pelo longo?
# perna curta?
# faz auau?
porco1 = [0, 1, 0]
porco2 = [0, 1, 1]
porco3 = [1, 1, 0]

cachorro1 = [0, 1, 1]
cachorro2 = [1, 0, 1]
cachorro3 = [1, 1, 1]

#  1 - porco  |   0 - cachorro

# dados = x
# classes = y

train_x = [porco1, porco2, porco3, cachorro1, cachorro2, cachorro3]
train_y = [1, 1, 1, 0, 0, 0]    # labels - etiquetas

from sklearn.svm import LinearSVC

# Passar as informações para modelo
modelo = LinearSVC()
# adaptar o modelo as informações (dados, classes) - fit
# aprendizado supervisionado  -  falar para ele o que e cada coisa
modelo.fit(train_x, train_y)

animal_misterioso = [1, 1, 1]
# tentar prever qual a classe do animal misterioso
# predict não funciona passando 1 valor - ai colocou em uma lista
modelo.predict([animal_misterioso])

# resultado   - array([0])  -  cachorro

misterio1 = [1, 1, 1]   # cachorro
misterio2 = [1, 1, 0]   # porco
misterio3 = [0, 1, 1]   # porco

testes_x = [misterio1, misterio2, misterio3]
testes_y = [0, 1, 1]

previsoes = modelo.predict(testes_x)

# resultado errado - array([0, 1, 0])

# previsoes não é uma lista - array([0, 1, 0])
# sklearn - usa a biblioteca numpy

previsoes == testes_y

# devolve uma array do numpy  - array([ True,  True, False])
# podendo somar

corretos = (previsoes == testes_y).sum()
# devolve 2 - número de verdadeiros

total = len(testes_x)

taxa_acertos = corretos/total

print(f"Taxa de acertos: {taxa_acertos}")

# falar em porcentagem
print(f"Taxa de acertos: {taxa_acertos * 100}")

# função do sklearn que mede a taxa de acertos - accuracy_score

from sklearn.metrics import accuracy_score

# accuracy_score(valores_verdadeiros, previsoes)    -   ver na documentação
taxa_acerto = accuracy_score(testes_y, previsoes)

print(taxa_acerto)

"""##Ordem correta para treinar o algoritmo

Definir um modelo de treino, definir uma lista com dados para treino e dados com os resultados esperados, treinar com base na lista de dados e nos resultados esperados.
"""