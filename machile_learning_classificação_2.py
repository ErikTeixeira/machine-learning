# -*- coding: utf-8 -*-
"""machile learning - classificação - 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11fvN0hjm1EHlDlVT5fm60-thmeCDUqKn
"""

import pandas as pd
# ler um arquivo csv

uri = "https://gist.githubusercontent.com/guilhermesilveira/2d2efa37d66b6c84a722ea627a897ced/raw/10968b997d885cbded1c92938c7a9912ba41c615/tracking.csv"
dados = pd.read_csv(uri)

# imprimir só as primeiras linhas
dados.head()

# renomear as colunas
mapa = {
    "home" : "principal",
    "how_it_works" : "como_funciona",
    "contact" : "contato",
    "bought" : "comprou"
}

# sem alterar a tabela original
dados = dados.rename(columns = mapa)

# separar o home, how_it_works, contact do bought
# separar o X do Y

# lista dentro de lista para pegar varios valores
x = dados[["principal", "como_funciona", "contato"]]
# uma coluna não precisa do colchete extra
y = dados["comprou"]

# SEMPRE SEPARAR O TREINO DO TESTE

# formato dos dados   -  99 linhas  |  4 colunas
dados.shape

# pegar do  x  75% porcento  -  vai pegar do primeiro até o elemento 74
treino_x = x[:75]
treino_y = y[:75]

# teste é apartir do 75   -  24 elementos
teste_x = x[75:]
teste_y = y[75:]

# treinar
from sklearn.svm import LinearSVC

modelo = LinearSVC()

modelo.fit(treino_x, treino_y)

# prever e ver quanto acertou
from sklearn.metrics import accuracy_score

previsoes = modelo.predict(teste_x)

taxa_acerto = accuracy_score(teste_y, previsoes)
print(f"A taxa de acerto é {taxa_acerto * 100:.2f}%")

"""## Usando a biblioteca para separar treino de teste"""

# Separar o treino do teste, em vez das 4 linhas de codigo acima usar este

from sklearn.model_selection import train_test_split

# test size = 25%
treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25 )

# --------- Cada fez que roda faz separação aleatoria, fazendo com que o treino de resultados diferentes

# treinar
from sklearn.svm import LinearSVC

modelo = LinearSVC()

modelo.fit(treino_x, treino_y)

# prever e ver quanto acertou
from sklearn.metrics import accuracy_score

previsoes = modelo.predict(teste_x)

taxa_acerto = accuracy_score(teste_y, previsoes)
print(f"A taxa de acerto é {taxa_acerto * 100:.2f}%")

"""### SEED - Definir a ordem dos números aleatorios"""

from sklearn.model_selection import train_test_split

# ---------  Para que não de resultados diferentes, fazer uma SEED para definir a ordem dos números aleatorios
SEED = 20

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, random_state = SEED, test_size = 0.25 )

# treinar
from sklearn.svm import LinearSVC

modelo = LinearSVC()

modelo.fit(treino_x, treino_y)

# prever e ver quanto acertou
from sklearn.metrics import accuracy_score

previsoes = modelo.predict(teste_x)

taxa_acerto = accuracy_score(teste_y, previsoes)
print(f"A taxa de acerto é {taxa_acerto * 100:.2f}%")

"""### treino y e teste y  ‎‎‎‎‎‎‎‎ㅤ- ‎‎‎‎‎‎‎‎ㅤ Tem que ser proporcionais  ‎‎‎‎‎‎‎‎ㅤ-‎‎‎‎‎‎‎‎ㅤ  stratify = y  ‎‎‎‎‎‎‎‎ㅤ->‎‎‎‎‎‎‎‎ㅤ separar proporcionalmente de acordo com o Y

"""

from sklearn.model_selection import train_test_split

SEED = 20

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, random_state = SEED, test_size = 0.25, stratify = y )

# treinar
from sklearn.svm import LinearSVC

modelo = LinearSVC()

modelo.fit(treino_x, treino_y)

# prever e ver quanto acertou
from sklearn.metrics import accuracy_score

previsoes = modelo.predict(teste_x)

taxa_acerto = accuracy_score(teste_y, previsoes)
print(f"A taxa de acerto é {taxa_acerto * 100:.2f}%")

# Proporção ficou agora muito proxima de 2 para 1

tr_y = treino_y.value_counts()

te_y = teste_y.value_counts()

print(tr_y,"\n", te_y)